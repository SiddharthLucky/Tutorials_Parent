- Build a console(any) application and add selenium web driver and chrome driver in the add NuGet references.

- Check the working - check in the packages.config

- X path - find a specific elemets path avoid generic naming.

--------------Initial Steps---------------

- Step 1: 
	Select which website to hit.
	
- Step 2:
	Which web elements to verify.
	
- Create individual fields for all and set a var with name
	ex: var emailData = driver.FindElement(By.Id("email")); - email is taken from inspect element webpage
	emailData.sendKeys("Sending value");
	
- Step 3:
	Verify working

- Store the url in a string variable.
- then use driver.Navigate().GoToUrl(url); to open a new chrome window and navigate to it.



-- Web pages generated by API can use control name - One of the scenarios

All of below code is written in the unit test case file. you can also write the same
in a regular file. to manage the variables.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using ConsoleApplication1;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;

namespace ConsoleApplication1.Tests
{
    [TestClass()]
    public class ProgramTests
    {
        [TestMethod()]
        public void testFacebookTest()
        {
            // Arrange
            IWebDriver driver = new ChromeDriver();

            // For testing
            //1. Which website to hit
            String url = "https://www.facebook.com";
            driver.Navigate().GoToUrl(url);

            // Act
            //2. Which web elements you want to verify
            var emailData = driver.FindElement(By.Id("email"));
            emailData.SendKeys("testData");

            var passData = driver.FindElement(By.XPath("//input[@id=\"pass\"]"));
            if (passData == null) throw new ArgumentNullException(nameof(passData));
            passData.SendKeys("newPass");

            var loginButton = driver.FindElement(By.XPath("//*[@id='loginbutton']//input"));

            // Assert
            Assert.IsTrue(loginButton.Enabled);
            loginButton.Click();
            
            driver.Close();
            
            //Assert.Fail();
        }
    }
}

-- Unit test file steps

//Arrange
//Act
//Assert

